/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.texas.csit.attendance;

import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Yuba Raj Kalathoki
 */
public class AttendanceEditPanel extends javax.swing.JPanel {

    List<JCheckBox> checkBoxes = new ArrayList<>();

    /**
     * Creates new form AttendanceEditPanel
     */
    public AttendanceEditPanel() {
        initComponents();
//        displayStudentsRollNoToEditAttendance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attendanceEditScrollPane = new javax.swing.JScrollPane();
        attendanceEditInnerPanel = new javax.swing.JPanel();
        attendanceUpdateButton = new javax.swing.JButton();

        javax.swing.GroupLayout attendanceEditInnerPanelLayout = new javax.swing.GroupLayout(attendanceEditInnerPanel);
        attendanceEditInnerPanel.setLayout(attendanceEditInnerPanelLayout);
        attendanceEditInnerPanelLayout.setHorizontalGroup(
            attendanceEditInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        attendanceEditInnerPanelLayout.setVerticalGroup(
            attendanceEditInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );

        attendanceEditScrollPane.setViewportView(attendanceEditInnerPanel);

        attendanceUpdateButton.setText("Update");
        attendanceUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendanceUpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attendanceEditScrollPane)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(attendanceUpdateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attendanceEditScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(attendanceUpdateButton)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void attendanceUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendanceUpdateButtonActionPerformed

        ArrayList<String> selectedStudents = new ArrayList();
        for (JCheckBox c : checkBoxes) {
            if (c.isSelected()) {
                selectedStudents.add(c.getText());
            }
        }

        System.out.println("selected student size: " + selectedStudents.size());

        Date attendanceDate = new Date();
        Timestamp timestamp = new Timestamp(attendanceDate.getTime());

        List<AttendanceInfoDto> oldAttendanceList = getTodaysAttendance();
        String date = getTodaysDate();
        Connection cn = DatabaseConnection.getConnection();
        try {
            Statement stat = cn.createStatement();
            //delete old attendance for particular day
            String sql = "delete from attendanc_info where attendance_date LIKE '" + date + "%'";
            stat.executeUpdate(sql);
            for (String rollNo : selectedStudents) {
                String sql1 = "insert into attendanc_info (roll_no, attendance_status, attendance_date) values (" + rollNo + ", 'P', '" + timestamp + "')";
                stat.executeUpdate(sql1);
            }
            JOptionPane.showMessageDialog(null, "Attendance updated!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed!");
        }
    }//GEN-LAST:event_attendanceUpdateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel attendanceEditInnerPanel;
    private javax.swing.JScrollPane attendanceEditScrollPane;
    private javax.swing.JButton attendanceUpdateButton;
    // End of variables declaration//GEN-END:variables

    public void displayStudentsRollNoToEditAttendance() {
        attendanceEditInnerPanel.removeAll();
        attendanceEditInnerPanel.setLayout(new GridLayout(0, 2, 10, 10));
        Connection cn = DatabaseConnection.getConnection();

        String sql = "Select * from student";

        ArrayList<String> studentList = new ArrayList<>();
        try {
            Statement stat = cn.createStatement();
            ResultSet rs = stat.executeQuery(sql);

            while (rs.next()) {
                String name = rs.getString("roll_number");
                studentList.add(name);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        System.out.println("student list : " + studentList);

        ArrayList<AttendanceInfoDto> attendanceList = getTodaysAttendance();

        for (String s : studentList) {
            JCheckBox cb = new JCheckBox();
            cb.setText(s);

            for (AttendanceInfoDto dto : attendanceList) {

                if (dto.getRollNo() == Integer.parseInt(s)) {
                    cb.setSelected(true);
                }
            }

            checkBoxes.add(cb);// for button functionality
            attendanceEditInnerPanel.add(cb);
        }
    }

    private ArrayList<AttendanceInfoDto> getTodaysAttendance() {
        ArrayList<AttendanceInfoDto> attendanceList = new ArrayList<>();
        Connection cn = DatabaseConnection.getConnection();

        String date = getTodaysDate();
        System.out.println("date: " + date);
        String sql = "Select * from attendanc_info where attendance_date LIKE '" + date + "%'";
        System.out.println("sql: " + sql);
        try {
            Statement stat = cn.createStatement();
            ResultSet rs = stat.executeQuery(sql);
            while (rs.next()) {
                AttendanceInfoDto dto = new AttendanceInfoDto();
                dto.setAttendanceDate(rs.getString("attendance_date"));
                dto.setAttendanceStatus(rs.getString("attendance_status").charAt(0));
                dto.setId(Integer.parseInt(rs.getString("id")));
                dto.setRollNo(Integer.parseInt(rs.getString("roll_no")));
                attendanceList.add(dto);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return attendanceList;
    }

    private String getTodaysDate() {
        Date attendanceDate = new Date();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String date = format.format(attendanceDate);
        return date;
    }

}
